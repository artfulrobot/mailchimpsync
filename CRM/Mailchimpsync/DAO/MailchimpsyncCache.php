<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2019
 *
 * Generated from /buildkit/build/dmaster/sites/default/files/civicrm/ext/mailchimpsync/xml/schema/CRM/Mailchimpsync/MailchimpsyncCache.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:338e20c14a7c1c254752c3028934f902)
 */

/**
 * Database access object for the MailchimpsyncCache entity.
 */
class CRM_Mailchimpsync_DAO_MailchimpsyncCache extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_mailchimpsync_cache';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique MailchimpsyncCache ID
   *
   * @var int
   */
  public $id;

  /**
   * @var string
   */
  public $mailchimp_list_id;

  /**
   * Theoretically redundant md5 of lower case email but Mailchimp has bugs
   *
   * @var string
   */
  public $mailchimp_member_id;

  /**
   * @var string
   */
  public $mailchimp_email;

  /**
   * subscribed|unsubscribed|cleaned|pending|transactional|archived
   *
   * @var string
   */
  public $mailchimp_status;

  /**
   * added|removed|pending?
   *
   * @var string
   */
  public $civicrm_status;

  /**
   * From API's last_changed field
   *
   * @var datetime
   */
  public $mailchimp_updated;

  /**
   * Time subscription group last updated.
   *
   * @var datetime
   */
  public $civicrm_updated;

  /**
   * Json data
   *
   * @var text
   */
  public $mailchimp_data;

  /**
   * Json data
   *
   * @var text
   */
  public $civicrm_data;

  /**
   * FK to Contact
   *
   * @var int
   */
  public $civicrm_contact_id;

  /**
   * ok|todo|live|redo|fail
   *
   * @var string
   */
  public $sync_status;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_mailchimpsync_cache';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'civicrm_contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('Unique MailchimpsyncCache ID'),
          'required' => TRUE,
          'where' => 'civicrm_mailchimpsync_cache.id',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_list_id' => [
          'name' => 'mailchimp_list_id',
          'type' => CRM_Utils_Type::T_STRING,
          'required' => TRUE,
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_list_id',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_member_id' => [
          'name' => 'mailchimp_member_id',
          'type' => CRM_Utils_Type::T_STRING,
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('Theoretically redundant md5 of lower case email but Mailchimp has bugs'),
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_member_id',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_email' => [
          'name' => 'mailchimp_email',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Mailchimp Email'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_email',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_status' => [
          'name' => 'mailchimp_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Mailchimp Status'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('subscribed|unsubscribed|cleaned|pending|transactional|archived'),
          'maxlength' => 20,
          'size' => CRM_Utils_Type::MEDIUM,
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_status',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'civicrm_status' => [
          'name' => 'civicrm_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Civicrm Status'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('added|removed|pending?'),
          'maxlength' => 8,
          'size' => CRM_Utils_Type::EIGHT,
          'where' => 'civicrm_mailchimpsync_cache.civicrm_status',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_updated' => [
          'name' => 'mailchimp_updated',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Mailchimp Updated'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('From API\'s last_changed field'),
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_updated',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'civicrm_updated' => [
          'name' => 'civicrm_updated',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Civicrm Updated'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('Time subscription group last updated.'),
          'where' => 'civicrm_mailchimpsync_cache.civicrm_updated',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'mailchimp_data' => [
          'name' => 'mailchimp_data',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Mailchimp Data'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('Json data'),
          'where' => 'civicrm_mailchimpsync_cache.mailchimp_data',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
        ],
        'civicrm_data' => [
          'name' => 'civicrm_data',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Civicrm Data'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('Json data'),
          'where' => 'civicrm_mailchimpsync_cache.civicrm_data',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
        ],
        'civicrm_contact_id' => [
          'name' => 'civicrm_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('FK to Contact'),
          'where' => 'civicrm_mailchimpsync_cache.civicrm_contact_id',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
        'sync_status' => [
          'name' => 'sync_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_Mailchimpsync_ExtensionUtil::ts('Sync Status'),
          'description' => CRM_Mailchimpsync_ExtensionUtil::ts('ok|todo|live|redo|fail'),
          'maxlength' => 4,
          'size' => CRM_Utils_Type::FOUR,
          'where' => 'civicrm_mailchimpsync_cache.sync_status',
          'default' => 'todo',
          'table_name' => 'civicrm_mailchimpsync_cache',
          'entity' => 'MailchimpsyncCache',
          'bao' => 'CRM_Mailchimpsync_DAO_MailchimpsyncCache',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'mailchimpsync_cache', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'mailchimpsync_cache', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_list_id_sync_status' => [
        'name' => 'index_list_id_sync_status',
        'field' => [
          0 => 'mailchimp_list_id',
          1 => 'sync_status',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_mailchimpsync_cache::0::mailchimp_list_id::sync_status',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
